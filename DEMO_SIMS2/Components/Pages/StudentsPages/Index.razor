@page "/students"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorApp3.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@inject IDbContextFactory<BlazorApp3.Data.ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Manage Students</PageTitle>

<h1>Manage Students</h1>
@if(isAdmin)
{
<p>
    <a href="users/create"><i class="fa-solid fa-square-plus"></i></a>
</p>
}


<QuickGrid Class="table"
           Items='@(DbFactory.CreateDbContext().ApplicationUser.Where(u => u.Role.Equals("Student")))'>


    <PropertyColumn Property="users => users.Name" />
    <PropertyColumn Property="users => users.Code" />
    <PropertyColumn Property="users => users.PhoneNumber" />
    <PropertyColumn Property="users => users.Email" />
    <PropertyColumn Property="users => users.Role" />
@if(isAdmin)
{
    <TemplateColumn Context="users">
        <a href="@($"users/edit?id={users.Id}")"><i class="fa-solid fa-pen-to-square"></i></a> |
        <a href="@($"users/details?id={users.Id}")"><i class="fa-solid fa-circle-info"></i></a> |
        <a href="@($"users/delete?id={users.Id}")"><i class="fa-solid fa-trash"></i></a>
    </TemplateColumn>
}
</QuickGrid>
@code
{
    private bool isStudent;
    private bool isAdmin;
    private bool isLecture;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check if the user is in the "Student" role
        isStudent = user.Claims.Any(c => c.Type == "Role" && c.Value == "Student");
        isAdmin = user.Claims.Any(c => c.Type == "Role" && c.Value == "Admin");
        isLecture = user.Claims.Any(c => c.Type == "Role" && c.Value == "Lecture");

    }

}